{
  "print_string": {
    "type": "function",
    "pattern": "print\\(\"(.*?)\"\\);",
    "replacement": "println!(\"{}\", \"\\1\");"
  },
  "print_number": {
    "type": "function",
    "pattern": "print\\((\\d+)\\);",
    "replacement": "println!(\"{}\", \\1);"
  },
  "var_string": {
    "type": "variable",
    "pattern": "let (\\w+) = \"(.*?)\";",
    "replacement": "let \\1 = String::from(\"\\2\");"
  },
  "var_number": {
    "type": "variable",
    "pattern": "let (\\w+) = (\\d+);",
    "replacement": "let \\1 = \\2;"
  },
  "ref": {
    "type": "input",
    "pattern": "ref (\\w+) >> (\\w+);",
    "replacement": "std::io::stdin().read_line(&mut \\2).unwrap();"
  },
  "int": {
    "type": "function",
    "pattern": "^\\s*int\\s+(\\w+)\\s*\\(\\)\\s*\\{\\s*$",
    "replacement": "fn \\1() {"
  },
  "whee_marker": {
    "type": "meta",
    "pattern": "^=== WHEE ===$",
    "replacement": "// Whee"
  },
  "empty_line": {
    "type": "meta",
    "pattern": "^\\s*$",
    "replacement": ""
  },
  "closing_brace": {
    "type": "syntax",
    "pattern": "^\\s*}\\s*$",
    "replacement": "}"
  },
  "call": {
    "type": "call",
    "pattern": "^\\s*call\\s+(\\w+)\\s*;\\s*$",
    "replacement": "\\1();"
  },
  "rust_cmd": {
    "type": "meta",
    "pattern": "^\\s*-(.*)$",
    "replacement": "\\1"
  },
  "if": {
    "type": "control",
    "pattern": "^\\s*if\\s+\\((.*?)\\)\\s*\\{\\s*$",
    "replacement": "if \\1 {"
  },
  "else": {
    "type": "control",
    "pattern": "^\\s*else\\s*\\{\\s*$",
    "replacement": "else {"
  },
  "for_loop": {
    "type": "loop",
    "pattern": "^\\s*for\\s+(\\w+)\\s+in\\s+(\\w+)\\s*\\{\\s*$",
    "replacement": "for \\1 in \\2 {"
  },
  "while_loop": {
    "type": "loop",
    "pattern": "^\\s*while\\s+\\((.*?)\\)\\s*\\{\\s*$",
    "replacement": "while \\1 {"
  },
  "comment_hash": {
    "type": "meta",
    "pattern": "^\\s*#(.*)$",
    "replacement": "// \\1"
  },
  "import_rust_std": {
    "type": "meta",
    "pattern": "^\\s*importrs\\s+(std::[\\w:]+);\\s*$",
    "replacement": "use \\1;"
  },
  "import_rust_alias": {
    "type": "meta",
    "pattern": "^\\s*importrs\\s+(std::[\\w:]+)\\s+as\\s+(\\w+);\\s*$",
    "replacement": "use \\1 as \\2;"
  },
  "add_numbers": {
    "type": "math",
    "pattern": "^\\s*add\\s+(\\d+)\\s+and\\s+(\\d+)\\s+>>\\s+(\\w+);$",
    "replacement": "let \\3 = \\1 + \\2;"
  },
  "return": {
    "type": "function",
    "pattern": "^\\s*return\\s+(.*);$",
    "replacement": "return \\1;"
  },
  "thread_block": {
    "type": "meta",
    "pattern": "^\\s*thread\\s+(\\w+)\\s*\\{\\s*$",
    "replacement": "let \\1 = std::thread::spawn(|| {"
  },
  "thread_end": {
    "type": "meta",
    "pattern": "^\\s*endthread\\s*$",
    "replacement": "});"
  }
}
